import { ref } from "vue";

export const events = {
  draggedItemData: ref(null),
  allowTouchDrop: ref(null),
  click: (event) => {
    console.log("click");
  },
  dragstart: (event, itemData) => {
    // init ghost
    ghost.init(event);

    // store dragged item data
    events.draggedItemData.value = itemData;

    if (event.type === "dragstart") {
      // set drag effect
      event.dataTransfer.dropEffect = "move";
      event.dataTransfer.effectAllowed = "move";
      // hide vanilla drag ghost
      event.dataTransfer.setDragImage(new Image(), 0, 0);
    } else if (event.type === "touchstart") {
      // events.draggedItemData.value = itemData;
    }
  },
  drag: (event) => {
    // update ghost
    ghost.update(event);

    if (event.type === "drag") {
      // console.log("drag target", event.target);
    } else if (event.type === "touchmove") {
      // get correct target box
      const correctTarget = document.getElementById(
        events.draggedItemData.value.target
      );
      const correctTargetBox = correctTarget.getBoundingClientRect();

      // detect the overlap of touchmove into the target
      const touch = event.touches[0];
      const overlaps =
        touch.clientX >= correctTargetBox.left &&
        touch.clientX <= correctTargetBox.right &&
        touch.clientY >= correctTargetBox.top &&
        touch.clientY <= correctTargetBox.bottom;

      // allow drop if overlaps
      events.allowTouchDrop.value = overlaps;

      console.log("events.allowTouchDrop", events.allowTouchDrop.value);
    }
  },
  drop: (event, options, targets) => {
    // remove ghost
    ghost.remove();

    const itemId = events.draggedItemData.value.id;

    if (event.type === "drop") {
      const desiredId = events.draggedItemData.value.target;
      const targetId = event.target.getAttribute("id");

      const acceptDrop = desiredId == targetId;
      if (acceptDrop) {
        game.dropItem(events.draggedItemData, options, targets);
        events.draggedItemData.value = null;
      } else {
        // ghost.unhideDraggedOption(event.target);
        events.draggedItemData.value = null;
        return false;
      }
    } else if (event.type === "touchend") {
      if (events.allowTouchDrop.value) {
        const targetId = events.draggedItemData.value.target;

        game.dropItem(events.draggedItemData, options, targets);
      } else {
        console.warn("restore");
        // ghost.unhideDraggedOption(event.target);
      }

      events.draggedItemData.value = null;
      events.allowTouchDrop.value = false;
    }
  },
};

export const ghost = {
  init: (event) => {
    let dragGhost = document.createElement("div");
    dragGhost.setAttribute("id", "drag-ghost");

    let itemClone = event.target.cloneNode(true);
    dragGhost.appendChild(itemClone);

    let left, top;

    if (event.type === "drag") {
      left = event.pageX;
      top = event.pageY;
    } else if (event.type === "touchmove") {
      left = event.touches[0].pageX;
      top = event.touches[0].pageY;
    }

    dragGhost.style.left = left + "px";
    dragGhost.style.top = top + "px";

    document.getElementById("app").appendChild(dragGhost);
  },
  update: (event) => {
    let dragGhost = document.getElementById("drag-ghost");

    let left, top;

    if (event.type === "drag") {
      left = event.pageX;
      top = event.pageY;
    } else if (event.type === "touchmove") {
      left = event.touches[0].pageX;
      top = event.touches[0].pageY;
    }

    dragGhost.style.left = left + "px";
    dragGhost.style.top = top + "px";
  },
  remove: () => {
    let dragGhost = document.getElementById("drag-ghost");
    if (dragGhost) dragGhost.remove();
  },
  // hideDraggedOption: (element) => {
  //   element.style.display = "none";
  // },
  // unhideDraggedOption: (element) => {
  //   element.style.display = "block";
  // },
};

export const game = {
  state: ref("playing"),
  dropItem: (data, options, targets) => {
    console.log("dropitem", options, targets);

    // mark option as placed
    const option = options.find((item) => item.id == data.value.id);
    console.log("option", option);

    option.placed = true;

    // add item to target.content
    const target = targets.find((item) => item.id == data.value.target);
    target.content.push(data.value);

    // check if target is solved
    game.solveTarget(data.value, options, targets);
  },
  solveTarget: (data, options, targets) => {
    // get all options in options array wich has targe == targetId
    const targetOptions = options.filter((item) => item.target == data.target);
    // check if all targetOptions are also placed == true
    const solved = targetOptions.every((item) => item.placed == true);

    if (solved) {
      console.warn(data.target, "solved");

      const target = targets.find((item) => item.id == data.target);
      target.solved = true;
      // target.content.push(data);

      // check if game is complete
      game.validateGame(options, targets);
    }
  },
  validateGame: (options, targets) => {
    // check if all options attribute placed is true
    const unplacedItems = options.find((item) => !item.placed);
    if (!unplacedItems) game.complete();

    // else alert("Please place all options");
  },
  complete: () => {
    console.log("COMPLETED");
    game.state.value = "completed";
  },
};
