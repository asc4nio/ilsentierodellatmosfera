<script setup>
/**
 * https://www.youtube.com/watch?v=-kZLD40d-tI
 * https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API
 *
 * touch doc:
 * https://stackoverflow.com/questions/68000255/html-drag-and-drop-on-touchscreen
 */

import { ref } from "vue";
const emit = defineEmits(["completed"]);

// init stores
const options = ref([]);
const targets = ref([]);

// init data
const optionsCount = 3;
for (let i = 0; i < optionsCount; i++) {
  options.value.push({ name: "DraggableItem", id: i });
  targets.value.push({ name: "DraggableTarget", id: i, solved: false });
}

// GENERIC EVENTS
const onClick = (event) => {
  console.log("onClick", event);
};

// MOUSE EVENTS
const onDragStart = (event, itemData) => {
  console.log("startDrag", event, itemData);

  initGhost(event);

  event.dataTransfer.dropEffect = "move";
  event.dataTransfer.effectAllowed = "move";
  event.dataTransfer.setData("itemId", itemData.id);

  let img = new Image();
  event.dataTransfer.setDragImage(img, 0, 0);
};
const onDrag = (event) => {
  console.log("onDrag", event);

  updateGhost(event);
};
const onDrop = (event) => {
  console.log("onDrop", event);

  removeGhost();

  const itemId = event.dataTransfer.getData("itemId");
  const targetId = event.target.getAttribute("data-accept-id");

  const acceptDrop = itemId == targetId;
  if (acceptDrop) {
    dropItem(targetId, itemId);
  } else {
    unhideDraggedOption(event.target);
    return false;
  }
};

// TOUCH EVENTS
const currentTouchItem = ref(null);
const allowTouchDrop = ref(false);
const onTouchStart = (event, itemData) => {
  console.log("onTouchstartDrag", event);

  currentTouchItem.value = itemData;

  initGhost(event);
  // hideDraggedOption(event.target);
};
const onTouchMove = (event, itemData) => {
  console.log("touchmoveDrag", event);
  const itemId = currentTouchItem.value.id;

  // update ghost
  updateGhost(event);

  // get correct target box
  const correctTarget = document.querySelector(`[data-accept-id='${itemId}']`);
  const correctTargetBox = correctTarget.getBoundingClientRect();

  // detect the overlap of touchmove into the target
  const touch = event.touches[0];
  if (
    touch.clientX >= correctTargetBox.left &&
    touch.clientX <= correctTargetBox.right &&
    touch.clientY >= correctTargetBox.top &&
    touch.clientY <= correctTargetBox.bottom
  ) {
    // allow drop
    allowTouchDrop.value = true;
    console.log("OH YEAH");
  } else {
    // don't allow drop
    allowTouchDrop.value = false;
    console.log("NOPE");
  }
};
const onTouchEnd = (event, itemData) => {
  console.log("touchendDrag");

  // remove ghost
  removeGhost();

  if (allowTouchDrop.value) {
    dropItem(currentTouchItem.value.id, currentTouchItem.value.id);
  } else {
    console.warn("restore");
    unhideDraggedOption(event.target);
  }

  currentTouchItem.value = null;
  allowTouchDrop.value = false;
};

// GHOST
function initGhost(event) {
  // removeGhost();
  let touchGhost = document.createElement("div");
  touchGhost.setAttribute("id", "touch-ghost");

  let itemClone = event.target.cloneNode(true);
  touchGhost.appendChild(itemClone);

  let left, top;

  if (event.type === "drag") {
    left = event.pageX;
    top = event.pageY;
  } else if (event.type === "touchmove") {
    left = event.touches[0].pageX;
    top = event.touches[0].pageY;
  }

  // let left = event.touches[0].pageX;
  // let top = event.touches[0].pageY;
  touchGhost.style.left = left + "px";
  touchGhost.style.top = top + "px";

  document.getElementById("app").appendChild(touchGhost);
}
function updateGhost(event) {
  let touchGhost = document.getElementById("touch-ghost");

  let left, top;

  if (event.type === "drag") {
    left = event.pageX;
    top = event.pageY;
  } else if (event.type === "touchmove") {
    left = event.touches[0].pageX;
    top = event.touches[0].pageY;
  }

  // let left = event.touches[0].pageX;
  // let top = event.touches[0].pageY;

  touchGhost.style.left = left + "px";
  touchGhost.style.top = top + "px";
}
function removeGhost() {
  let touchGhost = document.getElementById("touch-ghost");
  if (touchGhost) touchGhost.remove();
}

// GAME METHODS
function dropItem(targetId, itemId) {
  // mark target as solved
  const target = targets.value.find((item) => item.id == targetId);
  target.solved = true;

  // remove item from list
  options.value = options.value.filter((item) => item.id != itemId);

  // verify if completed
  if (options.value.length == 0) complete();
}

function hideDraggedOption(element) {
  // element.style.opacity = 0;
  element.style.display = "none";
}

function unhideDraggedOption(element) {
  // element.style.opacity = 1;
  element.style.display = "block";
}

function complete() {
  console.log("COMPLETED");
  emit("completed");
}
</script>

<template>
  <div id="draggable-options" class="mb-8">
    <div
      class="draggable-item"
      :key="item.id"
      v-for="item in options"
      draggable="true"
      @click="onClick($event)"
      @dragstart="onDragStart($event, item)"
      @drag="onDrag($event)"
      @drop="onDrop($event)"
      @dragend="removeGhost"
      @dragenter.prevent
      @dragover.prevent
      @touchstart="onTouchStart($event, item)"
      @touchmove="onTouchMove($event, item)"
      @touchend="onTouchEnd($event, item)"
    >
      {{ item.name }}
      {{ item.id }}
    </div>
  </div>

  <div id="draggable-targets">
    <div
      class="draggable-target"
      :key="item.id"
      v-for="item in targets"
      :draggable="!item.solved"
      @drop="onDrop($event, targets)"
      @dragenter.prevent
      @dragover.prevent
      :data-accept-id="item.id"
    >
      {{ item.name }}
      {{ item.id }}
      <p v-if="item.solved">SOLVED</p>
    </div>
  </div>
</template>

<style scoped>
:global(#touch-ghost) {
  @apply min-h-20 min-w-20 bg-red-500 pointer-events-none select-none;
  @apply absolute z-10;
}

.draggable-item {
  @apply p-2 border border-black touch-auto;
}
.draggable-target {
  @apply p-2 border border-black min-h-10 min-w-10;
}
</style>
